par(mfrow=c(1,1))
plot(pc, lwd=5, col="red",xlab=("PCs"),ylab="eigen")
plot(pc$projections)
plot(pc$sdev)
plot(pc$projections[,1], pc$projections[,2])
plot(pc$sdev)
snmf_project = snmf(geno_genotypes, K=1:6, entropy = TRUE, repetitions = 3, CPU = 6, percentage = 0.10, project = "new")
plot(snmf_project, lwd = 3, col = "red", pch=1)
ce = cross.entropy(project, K = 3)
ce = cross.entropy(snmf_project, K = 3)
best = which.min(ce)
barplot(t(Q(snmf_project, K = 3, run  =best )), col = 1:5)
barplot(t(Q(snmf_project, K = 8, run  =best )), col = 1:5)
barplot(t(Q(snmf_project, K = 6, run  =best )), col = 1:5)
snmf_project = snmf(geno_genotypes, K=1:10, entropy = TRUE, repetitions = 3, CPU = 6, percentage = 0.10, project = "new")
barplot(t(Q(snmf_project, K = 6, run  =best )), col = 1:5)
barplot(t(Q(snmf_project, K = 6, run  =best )), col = 1:6)
barplot(t(Q(snmf_project, K = 10, run  =best )), col = 1:10)
barplot(t(Q(snmf_project, K = 8, run  =best )), col = 1:8)
barplot(t(Q(snmf_project, K = 7, run  =best )), col = 1:8)
barplot(t(Q(snmf_project, K = 6, run  =best )), col = 1:8)
barplot(t(Q(snmf_project, K = 5, run  =best )), col = 1:8)
barplot(t(Q(snmf_project, K = 4, run  =best )), col = 1:8)
barplot(t(Q(snmf_project, K = 3, run  =best )), col = 1:8)
(Q(snmf_project, K = 3, run  =best )
Q(snmf_project, K = 3, run  =best )
t(Q(snmf_project, K = 4, run  =best ))
t(sort(Q(snmf_project, K = 4, run  =best )))
barplot(t(sort(Q(snmf_project, K = 4, run  =best ))))
barplot(t(sort(Q(snmf_project, K = 4, run  =best ))), col = 1:4)
barplot(t(sort(Q(snmf_project, K = 4, run  =best ))), col = 1:4)
sort(Q(snmf_project, K = 4, run  =best )))
sort(Q(snmf_project, K = 4, run  =best ))
?order()
barplot(t(order(Q(snmf_project, K = 4, run  =best ))), col = 1:4)
barplot(t(order(Q(snmf_project, K = 4, run  =best ))), col = 1:4)
?order
pp = Q(snmf_project, K = 4, run  =best ))
pp = Q(snmf_project, K = 4, run  =best )
pp
order(pp)
pp[order(pp)]
pp[,order(pp)]
pp[order(pp),]
pp[order(pp),]
pp = data.frame(Q(snmf_project, K = 4, run  =best ))
pp[order(pp),]
pp
p
pp[order(pp)]
pp[,order(pp)]
pp[order(pp),]
pp
pp[,order(pp)]
pp[:,order(pp)]
pp[,order(pp)]
pp[order(pp),]
pp
order(pp)
library(plyr)
?arrange
arrange(pp, V1, V2, V3, V4)
barplot(t(pp))
barplot(t(pp), col = 1:8)
pp = data.frame(Q(snmf_project, K = 3, run  =best ))
pp = arrange(pp, V1, V2, V3, V4)
barplot(t(pp), col = 1:8)
barplot(t(pp), col = 1:8)
pp = arrange(pp, V1, V2, V3, V4)
pp
barplot(t(order(Q(snmf_project, K = 4, run  =best ))), col = 1:4))
barplot(t(order(Q(snmf_project, K = 4, run  =best ))), col = 1:4))
pp = data.frame(Q(snmf_project, K = 3, run  =best ))
pp = arrange(pp, V1, V2, V3, V4)
barplot(t(pp), col = 1:8)
pp = data.frame(Q(snmf_project, K = 3, run  =best ))
pp = arrange(pp, V4)
pp = arrange(pp, V3)
pp = arrange(pp, V2)
pp = arrange(pp, V1)
barplot(t(pp), col = 1:8)
pp = data.frame(Q(snmf_project, K = 3, run  =best ))
pp = arrange(pp, V4)
pp = arrange(pp, V3)
pp = arrange(pp, V2)
pp = arrange(pp, V1)
barplot(t(pp), col = 1:8)
barplot(t(pp), col = 1:8)
basic_env = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/basic.env'
basic_env = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/basic.env'
project = NULL
project = lfmm(lfmm_genotypes, basic_env, K = 3, repetitions = 5, CPU = 7, missing.data = TRUE, project = "new",
iterations = 10000, burnin = 5000)
zs = z.scores(project, K = 3)
?lfmm
zs.stouffer = apply(zs, MARGIN = 1, median)
lambda = median(zs^2)/.456
cp.values = pchisq(zs.stouffer^2/lambda, df = 1, lower = FALSE)
L = 500
q = 0.1
w = which(sort(cp.values) < q * (1:L)/L)
candidates = order(adj.p.values)[w]
L = 12399
q = 0.05
w = which(sort(cp.values) < q * (1:L)/L)
candidates = order(cp.values)[w]
candidates
w
cp.values
candidates
which.max(mlog10p.values (project, K=3, d=1, run = 2))
sort((mlog10p.values (project, K=3, d=1)))
plot(sort((mlog10p.values (project, K=3, d=1, run = 1))))
hist(cp.values)
plot(sort((mlog10p.values (project, K=3, d=1, run = 1))))
mlog10p.values
project
which.max(mlog10p.values (project, K=3, d=1, run = 2))
mlog10p.values
mlog10p.values(project, K=3, d=1, run = 2)
cp.values
data.frame('cpvals' = cp.values)
data.frame('cpvals' = cp.values)
zs.stouffer
seq(12399)
data.frame('locnum' = seq(12399), 'cpvals' = cp.values, 'zscore' = zs.stouffer )
data.frame('locnum' = seq(12399), 'cpvals' = cp.values, 'zscore' = zs.stouffer)
lfmm_results = data.frame('locnum' = seq(12399), 'cpvals' = cp.values, 'zscore' = zs.stouffer)
write.table(lfmm_results)
?write.table(lfmm_results)
?write.table(lfmm_results, file = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/lfmm_results.txt')
write.table(lfmm_results, file = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/lfmm_results.txt',
sep ='\t', quote = FALSE, row.names = FALSE)
?lfmm
library("LEA")
setwd("~/Desktop/waples/chum_populations/results/batch_4/LFMM")
ped_genotypes = '/home/ipseg/Desktop/waples/chum_populations/data/batch_4/pop_genotypes/non_paralogs.ped'
lfmm_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.lfmm'
geno_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.geno'
# convert a .ped  file
ped2lfmm(input.file = ped_genotypes,  output.file = lfmm_genotypes)
# convert lfmm file to geno
lfmm2geno(input.file = lfmm_genotypes, geno_genotypes, force = TRUE)
# run pca
pc = pca(lfmm_genotypes, scale = TRUE, center = TRUE)
par(mfrow=c(1,1))
# Plot eigenvalues.
plot(pc, lwd=5, col="red",xlab=("PCs"),ylab="eigen")
# Plot standard deviations.
plot(pc$sdev)
# pca projection
plot(pc$projections[,1], pc$projections[,2])
?ped2lfmm
library("LEA")
setwd("~/Desktop/waples/chum_populations/results/batch_4/LFMM")
ped_genotypes = '/home/ipseg/Desktop/waples/chum_populations/data/batch_4/pop_genotypes/non_paralogs.ped'
lfmm_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.lfmm'
geno_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.geno'
library("LEA")
setwd("~/Desktop/waples/chum_populations/results/batch_4/LFMM")
'/home/ipseg/Desktop/waples/chum_populations/data/batch_4/pop_genotypes/complete.ped'
#ped_genotypes = '/home/ipseg/Desktop/waples/chum_populations/data/batch_4/pop_genotypes/non_paralogs.ped'
ped_genotypes= '/home/ipseg/Desktop/waples/chum_populations/data/batch_4/pop_genotypes/complete.ped'
lfmm_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.lfmm'
geno_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.geno'
ped_genotypes= '/home/ipseg/Desktop/waples/chum_populations/data/batch_4/pop_genotypes/complete.ped'
lfmm_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.ped.lfmm'
geno_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.ped.geno'
ped2lfmm(input.file = ped_genotypes,  output.file = lfmm_genotypes)
lfmm2geno(input.file = lfmm_genotypes, geno_genotypes, force = TRUE)
# run pca
pc = pca(lfmm_genotypes, scale = TRUE, center = TRUE)
par(mfrow=c(1,1))
# Plot eigenvalues.
plot(pc, lwd=5, col="red",xlab=("PCs"),ylab="eigen")
# Plot standard deviations.
plot(pc$sdev)
# pca projection
plot(pc$projections[,1], pc$projections[,2])
# Perfom Tracy-Widom tests on all eigenvalues.
tw = tracy.widom(pc)
# display the p-values for the Tracy-Widom tests and plot the percentage of variance explained by each component
plot( -log10(tw$pvalues),tw$percentage)
plot(pc, lwd=5, col="red",xlab=("PCs"),ylab="eigen")
plot(pc$sdev)
plot(pc, lwd=5, col="red",xlab=("PCs"),ylab="eigen")
plot(pc$sdev)
plot(pc$projections[,1], pc$projections[,2])
tw = tracy.widom(pc)
plot( -log10(tw$pvalues),tw$percentage)
tw
snmf_project = NULL
snmf_project = snmf(geno_genotypes, K=1:10, entropy = TRUE, repetitions = 3, CPU = 6, percentage = 0.10, project = "new")
# plot cross-entropy criterion of all runs of the project
plot(snmf_project, lwd = 5, col = "red", pch=1)
# get the cross-entropy of each run for K = 3
ce = cross.entropy(snmf_project, K = 3)
# select the run with the lowest cross-entropy
best = which.min(ce)
# We can also visualize a barplot of ancestry coeffcients as follows.
barplot(t(Q(snmf_project, K = 3, run  =best )), col = 1:8, xlab = 'Individual')
barplot(t(order(Q(snmf_project, K = 4, run  =best ))), col = 1:4))
barplot(t(Q(snmf_project, K = 3, run  =best )), col = 1:8, xlab = 'Individual')
# LFMM including duplicated loci (dominance coded)
library("LEA")
setwd("~/Desktop/waples/chum_populations/results/batch_4/LFMM")
raw_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/EIGENSOFT/complete.dom.txt'
lfmm_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.ped.lfmm'
geno_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.ped.geno'
# convert raw file to lfmm
geno2lfmm(input.file = raw_genotypes, lfmm_genotypes, force = TRUE)
# LFMM including duplicated loci (dominance coded)
library("LEA")
setwd("~/Desktop/waples/chum_populations/results/batch_4/LFMM")
raw_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.dom.geno'
lfmm_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.ped.lfmm'
geno_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.ped.geno'
geno2lfmm(input.file = raw_genotypes, lfmm_genotypes, force = TRUE)
# convert lfmm file to geno
geno2lfmm(input.file = lfmm_genotypes, geno_genotypes, force = TRUE)
lfmm2geno(input.file = lfmm_genotypes, geno_genotypes, force = TRUE)
# LFMM including duplicated loci (dominance coded)
library("LEA")
setwd("~/Desktop/waples/chum_populations/results/batch_4/LFMM")
raw_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.dom.geno'
lfmm_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.dom.lfmm'
geno_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.dom.geno'
# convert raw file to lfmm
geno2lfmm(input.file = raw_genotypes, lfmm_genotypes, force = TRUE)
# convert lfmm file to geno
lfmm2geno(input.file = lfmm_genotypes, geno_genotypes, force = TRUE)
pc = pca(lfmm_genotypes, scale = TRUE, center = TRUE)
par(mfrow=c(1,1))
pca
pca()
?pca
pc = pca(lfmm_genotypes, scale = FALSE, center = FALSE)
par(mfrow=c(1,1))
# Plot eigenvalues.
plot(pc, lwd=5, col="red",xlab=("PCs"),ylab="eigen")
# Plot standard deviations.
plot(pc$sdev)
# pca projection
plot(pc$projections[,1], pc$projections[,2])
# Perfom Tracy-Widom tests on all eigenvalues.
tw = tracy.widom(pc)
# display the p-values for the Tracy-Widom tests and plot the percentage of variance explained by each component
plot( -log10(tw$pvalues),tw$percentage)
pc = pca(lfmm_genotypes, scale = FALSE, center = TRUE)
par(mfrow=c(1,1))
# Plot eigenvalues.
plot(pc, lwd=5, col="red",xlab=("PCs"),ylab="eigen")
# Plot standard deviations.
plot(pc$sdev)
# pca projection
plot(pc$projections[,1], pc$projections[,2])
# Perfom Tracy-Widom tests on all eigenvalues.
tw = tracy.widom(pc)
# display the p-values for the Tracy-Widom tests and plot the percentage of variance explained by each component
plot( -log10(tw$pvalues),tw$percentage)
snmf_project = NULL
snmf_project = snmf(geno_genotypes, K=1:10, entropy = TRUE, repetitions = 3, CPU = 6, percentage = 0.10, project = "new")
# plot cross-entropy criterion of all runs of the project
plot(snmf_project, lwd = 5, col = "red", pch=1)
# get the cross-entropy of each run for K = 3
ce = cross.entropy(snmf_project, K = 3)
# select the run with the lowest cross-entropy
best = which.min(ce)
# We can also visualize a barplot of ancestry coeffcients as follows.
barplot(t(Q(snmf_project, K = 3, run  =best )), col = 1:8, xlab = 'Individual')
plot(snmf_project, lwd = 5, col = "red", pch=1)
ce = cross.entropy(snmf_project, K = 3)
best = which.min(ce)
barplot(t(Q(snmf_project, K = 3, run  =best )), col = 1:8, xlab = 'Individual')
snmf_project = snmf(geno_genotypes, K=1:10, entropy = TRUE, repetitions = 3, CPU = 6, percentage = 0.10, project = "new", ploidy = 1)
# plot cross-entropy criterion of all runs of the project
plot(snmf_project, lwd = 5, col = "red", pch=1)
# get the cross-entropy of each run for K = 3
ce = cross.entropy(snmf_project, K = 3)
# select the run with the lowest cross-entropy
best = which.min(ce)
# We can also visualize a barplot of ancestry coeffcients as follows.
barplot(t(Q(snmf_project, K = 3, run  =best )), col = 1:8, xlab = 'Individual')
basic_env = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/basic.env'
plot(snmf_project, lwd = 5, col = "red", pch=1)
basic_env = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/basic.env'
project = NULL
project = lfmm(lfmm_genotypes, basic_env, K = 3, repetitions = 5, CPU = 7, missing.data = TRUE, project = "new", iterations = 10000, burnin = 5000, ploidy = 1)
?lfmm
basic_env = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/basic.env'
project = NULL
project = lfmm(lfmm_genotypes, basic_env, K = 3, repetitions = 5, CPU = 7, missing.data = TRUE, project = "new", iterations = 10000, burnin = 5000, ploidy = 1)
##LFMM##
basic_env = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/basic.env'
project = NULL
project = lfmm(lfmm_genotypes, basic_env, K = 3, repetitions = 5, CPU = 7, missing.data = TRUE, project = "new", iterations = 10000, burnin = 5000, ploidy = 1)
basic_env = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/basic.env'
project = NULL
project = lfmm(lfmm_genotypes, basic_env, K = 3, repetitions = 5, CPU = 7, missing.data = TRUE, project = "new", iterations = 10000, burnin = 5000)
basic_env = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/basic.env'
lfmm_project = NULL
lfmm_project = lfmm(lfmm_genotypes, basic_env, K = 3, repetitions = 3, CPU = 7, missing.data = TRUE, project = "new", iterations = 1000, burnin = 500)
zs = z.scores(lfmm_project, K = 3)
zs.stouffer = apply(zs, MARGIN = 1, median)
lambda = median(zs^2)/.456
cp.values = pchisq(zs.stouffer^2/lambda, df = 1, lower = FALSE)
L = 35579
q = 0.05
w = which(sort(cp.values) < q * (1:L)/L)
candidates = order(cp.values)[w]
candidates
which.max(mlog10p.values(lfmm_project, K=3, d=1, run = 2))
which.max(mlog10p.values(lfmm_project, K=3, d=1, run = 3))
sort((mlog10p.values (project, K=3, d=1)))
sort((mlog10p.values(lfmm_project, K=3, d=1)))
sort((mlog10p.values(lfmm_project, K=3, d=1)))[1:100]
plot(sort((mlog10p.values(project, K=3, d=1, run = 1))))
plot(sort((mlog10p.values(lfmm_project, K=3, d=1, run = 1))))
hist(cp.values)
mlog10p.values(lfmm_project, K=3, d=1, run = 2)
lfmm_results = data.frame('locnum' = seq(35579), 'cpvals' = cp.values, 'zscore' = zs.stouffer)
write.table(lfmm_results, file = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/lfmm_results.dom.txt', sep ='\t', quote = FALSE, row.names = FALSE)
lfmm_project = NULL
lfmm_project = lfmm(lfmm_genotypes, basic_env, K = 3, repetitions = 3, CPU = 7, missing.data = TRUE, project = "new", iterations = 10000, burnin = 5000)
# get the zscores of each run for K = 3
zs = z.scores(lfmm_project, K = 3)
# Combine the z-scores using the Stouffer method
zs.stouffer = apply(zs, MARGIN = 1, median)
# The median z-scores must be recalibrated before computing p-values. We suggest to start with computing the genomic inflation factor, λ, and then dividing the scores by λ  (Devlin and Roeder 1999)
lambda = median(zs^2)/.456
# calculate adjusted p-values
cp.values = pchisq(zs.stouffer^2/lambda, df = 1, lower = FALSE)
# Control of false discoveries
# To correct for multiple testing, we apply the Benjamini-Hochberg algorithm. This can be done as follows.
L = 35579
q = 0.05
w = which(sort(cp.values) < q * (1:L)/L)
candidates = order(cp.values)[w]
candidates
which.max(mlog10p.values(lfmm_project, K=3, d=1, run = 3))
sort((mlog10p.values(lfmm_project, K=3, d=1)))[1:100]
plot(sort((mlog10p.values(lfmm_project, K=3, d=1, run = 1))))
hist(cp.values)
mlog10p.values(lfmm_project, K=3, d=1, run = 2)
# Put together a data frame of results
lfmm_results = data.frame('locnum' = seq(35579), 'cpvals' = cp.values, 'zscore' = zs.stouffer)
write.table(lfmm_results, file = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/lfmm_results.dom.txt', sep ='\t', quote = FALSE, row.names = FALSE)
# get the zscores of each run for K = 3
zs = z.scores(lfmm_project, K = 3)
# Combine the z-scores using the Stouffer method
zs.stouffer = apply(zs, MARGIN = 1, median)
# The median z-scores must be recalibrated before computing p-values. We suggest to start with computing the genomic inflation factor, λ, and then dividing the scores by λ  (Devlin and Roeder 1999)
lambda = median(zs^2)/.456
# calculate adjusted p-values
cp.values = pchisq(zs.stouffer^2/lambda, df = 1, lower = FALSE)
# Control of false discoveries
# To correct for multiple testing, we apply the Benjamini-Hochberg algorithm. This can be done as follows.
L = 35579
q = 0.05
w = which(sort(cp.values) < q * (1:L)/L)
candidates = order(cp.values)[w]
candidates
which.max(mlog10p.values(lfmm_project, K=3, d=1, run = 3))
sort((mlog10p.values(lfmm_project, K=3, d=1)))[1:100]
plot(sort((mlog10p.values(lfmm_project, K=3, d=1, run = 1))))
hist(cp.values)
mlog10p.values(lfmm_project, K=3, d=1, run = 2)
# Put together a data frame of results
lfmm_results = data.frame('locnum' = seq(35579), 'cpvals' = cp.values, 'zscore' = zs.stouffer)
write.table(lfmm_results, file = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/lfmm_results.dom.txt', sep ='\t', quote = FALSE, row.names = FALSE)
# LFMM including duplicated loci (dominance coded)
library("LEA")
setwd("~/Desktop/waples/chum_populations/results/batch_4/LFMM")
raw_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.dom.geno'
lfmm_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.dom.lfmm'
geno_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.dom.geno'
# convert raw file to lfmm
geno2lfmm(input.file = raw_genotypes, lfmm_genotypes, force = TRUE)
# convert lfmm file to genonmf
lfmm2geno(input.file = lfmm_genotypes, geno_genotypes, force = TRUE)
# run pca
pc = pca(lfmm_genotypes, scale = FALSE, center = TRUE)
par(mfrow=c(1,1))
# Plot eigenvalues.
plot(pc, lwd=5, col="red",xlab=("PCs"),ylab="eigen")
# Plot standard deviations.
plot(pc$sdev)
# pca projection
plot(pc$projections[,1], pc$projections[,2])
# Perfom Tracy-Widom tests on all eigenvalues.
tw = tracy.widom(pc)
# display the p-values for the Tracy-Widom tests and plot the percentage of variance explained by each component
plot( -log10(tw$pvalues),tw$percentage)
# run snmf (sparse non-negative matrix factorization)
snmf_project = NULL
snmf_project = snmf(geno_genotypes, K=2:6, entropy = TRUE, repetitions = 3, CPU = 6, percentage = 0.10, project = "new", ploidy = 1)
install.packages(c("coda", "DiagrammeR", "doParallel", "fields", "foreach", "irlba", "iterators", "mgcv", "roxygen2", "sp", "spam", "stringi", "xtable"))
library("LEA")
setwd("~/Desktop/waples/chum_populations/results/batch_4/LFMM")
?z.scores
View(zs)
install.packages("getopt", repos="http://cran.r-project.org")
source("http://bioconductor.org/biocLite.R")
install.packages("phangorn", repos="http://cran.r-project.org")
biocLite("SNPRelate")
library("LEA")
setwd("~/Desktop/waples/chum_populations/results/batch_4/LFMM")
ped_genotypes = '/home/ipseg/Desktop/waples/chum_populations/data/batch_4/pop_genotypes/non_paralogs.ped'
lfmm_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.lfmm'
geno_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.geno'
# convert a .ped  file
ped2lfmm(input.file = ped_genotypes,  output.file = lfmm_genotypes)
# convert lfmm file to geno
lfmm2geno(input.file = lfmm_genotypes, geno_genotypes, force = TRUE)
# run pca
pc = pca(lfmm_genotypes, scale = TRUE, center = TRUE)
par(mfrow=c(1,1))
# Plot eigenvalues.
plot(pc, lwd=5, col="red",xlab=("PCs"),ylab="eigen")
# Plot standard deviations.
plot(pc$sdev)
# pca projection
plot(pc$projections[,1], pc$projections[,2])
# Perfom Tracy-Widom tests on all eigenvalues.
tw = tracy.widom(pc)
# display the p-values for the Tracy-Widom tests and plot the percentage of variance explained by each component
plot( -log10(tw$pvalues),tw$percentage)
# run snmf (sparse non-negative matrix factorization)
snmf_project = NULL
snmf_project = snmf(geno_genotypes, K=1:10, entropy = TRUE, repetitions = 3, CPU = 6, percentage = 0.10, project = "new")
# plot cross-entropy criterion of all runs of the project
plot(snmf_project, lwd = 5, col = "red", pch=1)
# get the cross-entropy of each run for K = 3
ce = cross.entropy(snmf_project, K = 3)
# select the run with the lowest cross-entropy
best = which.min(ce)
# We can also visualize a barplot of ancestry coeffcients as follows.
barplot(t(Q(snmf_project, K = 3, run  =best )), col = 1:8, xlab = 'Individual')
library(plyr)
pp = data.frame(Q(snmf_project, K = 3, run  =best ))
pp = arrange(pp, V4)
pp = arrange(pp, V3)
pp = arrange(pp, V2)
pp = arrange(pp, V1)
barplot(t(pp), col = 1:8)
barplot(t(order(Q(snmf_project, K = 3, run  =best ))), col = 1:4))
barplot(t(order(Q(snmf_project, K = 3, run  = best ))), col = 1:3))
barplot(t(order(Q(snmf_project, K = 3, run  = best ))), col = 1:3)
barplot(t(order(Q(snmf_project, K = 3, run  = best ))), col = 1:3)
barplot(t(order(Q(snmf_project, K = 3, run  = best ))), col = 1:4)
barplot(t(order(Q(snmf_project, K = 3, run  = best ))), col = 1:4)
barplot(t(Q(snmf_project, K = 3, run  =best )), col = 1:8, xlab = 'Individual')
png('/home/ipseg/Desktop/waples/chum_populations/paper/figures/supplemental/Q.non_paralogs.png')
barplot(t(Q(snmf_project, K = 3, run  =best )), col = 1:8, xlab = 'Individual')
dev.off()
pdf('/home/ipseg/Desktop/waples/chum_populations/paper/figures/supplemental/Q.non_paralogs.pdf')
barplot(t(Q(snmf_project, K = 3, run  =best )), col = 1:8, xlab = 'Individual')
dev.off()
# LFMM including duplicated loci (dominance coded)
library("LEA")
setwd("~/Desktop/waples/chum_populations/results/batch_4/LFMM")
raw_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.dom.geno'
lfmm_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.dom.lfmm'
geno_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.dom.geno'
# convert raw file to lfmm
geno2lfmm(input.file = raw_genotypes, lfmm_genotypes, force = TRUE)
# convert lfmm file to genonmf
lfmm2geno(input.file = lfmm_genotypes, geno_genotypes, force = TRUE)
# run pca
pc = pca(lfmm_genotypes, scale = FALSE, center = TRUE)
par(mfrow=c(1,1))
# Plot eigenvalues.
plot(pc, lwd=5, col="red",xlab=("PCs"),ylab="eigen")
# Plot standard deviations.
plot(pc$sdev)
# pca projection
plot(pc$projections[,1], pc$projections[,2])
# Perfom Tracy-Widom tests on all eigenvalues.
tw = tracy.widom(pc)
# display the p-values for the Tracy-Widom tests and plot the percentage of variance explained by each component
plot( -log10(tw$pvalues),tw$percentage)
# run snmf (sparse non-negative matrix factorization)
snmf_project = NULL
snmf_project = snmf(geno_genotypes, K=2:6, entropy = TRUE, repetitions = 5, CPU = 6, percentage = 0.10, project = "new", ploidy = 1)
# we may want to deal with the
# plot cross-entropy criterion of all runs of the project
plot(snmf_project, lwd = 5, col = "red", pch=1)
# get the cross-entropy of each run for K = 3
ce = cross.entropy(snmf_project, K = 3)
# select the run with the lowest cross-entropy
best = which.min(ce)
# We can also visualize a barplot of ancestry coeffcients as follows.
barplot(t(Q(snmf_project, K = 3, run  =best )), col = 1:8, xlab = 'Individual')
pdf('/home/ipseg/Desktop/waples/chum_populations/paper/figures/supplemental/Q.complete.pdf')
barplot(t(Q(snmf_project, K = 3, run  =best )), col = 1:8, xlab = 'Individual')
dev.off()
e^.732
e
exp(1)
e = exp(1)
e^.732
e^.309
read.table("C:\Users\IPSEG\Desktop\Waples\chum_populations\results\batch_4\pop_analysis\dxy.txt")
read.table("C:/Users/IPSEG/Desktop/Waples/chum_populations/results/batch_4/pop_analysis/dxy.txt")
aa = read.table("C:/Users/IPSEG/Desktop/Waples/chum_populations/results/batch_4/pop_analysis/dxy.txt", sep = '\t')
View(aa)
aa[3]
mean(aa[4])
mean(aa[[4]])
aa[[4]]
max(aa[[4]])
mean(aa[[4]], na.rm = TRUE)
