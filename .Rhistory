#yy[yy > 10000] = 5
scatter.smooth(xx, yy, span = .1, evaluation =40)
warnings()
scatter.smooth(xx, yy, span = .1, degree = 2,  evaluation =40)
xx = map_fst[map_fst$LG ==8,]$cM
yy = map_fst[map_fst$LG ==8,]$BS_Fst
#yy[yy > 10000] = 5
scatter.smooth(xx, yy, span = .1, degree = 2,  evaluation =40)
scatter.smooth(xx, yy, span = .2, degree = 2,  evaluation =40)
scatter.smooth(xx, yy, span = .2, evaluation =40)
scatter.smooth(xx, yy, span = .1, evaluation =40)
xx = map_fst[map_fst$LG ==10,]$cM
yy = map_fst[map_fst$LG ==10,]$WC_Fst
#yy[yy > 10000] = 5
scatter.smooth(xx, yy, span = .1, evaluation =40)
scatter.smooth(xx, yy, span = .1, degree = 2, evaluation =40)
scatter.smooth(xx, yy, span = .1, degree = 2, evaluation =100)
warnings
warnings()
scatter.smooth(xx, yy, span = .2, degree = 2, evaluation =100)
scatter.smooth(xx, yy, span = .2, degree = 7, evaluation =100)
scatter.smooth(xx, yy, span = .2, degree = 2, evaluation =100)
scatter.smooth(xx, yy, span = .2, degree = 1, evaluation =100)
scatter.smooth(xx, yy, span = .2, degree = 0, evaluation =100)
scatter.smooth(xx, yy, span = .1, degree = 0, evaluation =100)
scatter.smooth(xx, yy, span = .1, degree = 1, evaluation =100)
scatter.smooth(xx, yy, span = .1, degree = 2, evaluation =100)
scatter.smooth(xx, yy, span = .2, degree = 2, evaluation =100)
scatter.smooth(xx, yy, span = .2, degree = 2, evaluation =100)
xx = map_fst[map_fst$LG ==8,]$cM
yy = map_fst[map_fst$LG ==8,]$BS_Fst
#yy[yy > 10000] = 5
scatter.smooth(xx, yy, span = .2, degree = 2, evaluation =100)
scatter.smooth(xx, yy, span = .5, degree = 2, evaluation =100)
xx = map_fst[map_fst$LG ==10,]$cM
yy = map_fst[map_fst$LG ==10,]$WC_Fst
#yy[yy > 10000] = 5
scatter.smooth(xx, yy, span = .5, degree = 2, evaluation =100)
scatter.smooth(xx, yy, span = .5, degree = 3, evaluation =100)
xx = map_fst[map_fst$LG ==10,]$cM
yy = map_fst[map_fst$LG ==10,]$WC_Fst
#yy[yy > 10000] = 5
scatter.smooth(xx, yy, span = .5, degree = 3, evaluation =100)
scatter.smooth(xx, yy, span = .25, degree = 3, evaluation =100)
scatter.smooth(xx, yy, span = .25, degree = 2, evaluation =100)
xx = map_fst[map_fst$LG ==10,]$cM
yy = map_fst[map_fst$LG ==10,]$BS_Fst
#yy[yy > 10000] = 5
scatter.smooth(xx, yy, span = .25, degree = 2, evaluation =100)
scatter.smooth(xx, yy, span = .1, degree = 2, evaluation =100)
source("http://bioconductor.org/biocLite.R")
biocLite()
dir.create("LEA_analyses")
ls
ls()
dir()
setwd("~/Desktop/waples/chum_populations/results/LEA_analyses")
library(LEA)
biocLite("LEA")
library(LEA)
data("tutorial")
write.lfmm(tutorial.R, "genotypes.lfmm")
write.geno(tutorial.R, "genotypes.geno")
write.env(tutorial.C, "gradients.env")
View(tutorial.R)
?write.geno
?write.geno
pc = pca("genotypes.lfmm", scale = TRUE)
pc = pca("genotypes.lfmm", scale = TRUE)
pc
tw = tracy.widom(pc)
tw$pvalues[1:10]
plot(tw$percentage)
project = NULL
project = snmf("genotypes.geno", K=1:10, entropy = TRUE, repetitions = 10,
project = "new")
plot(project, lwd = 5, col = "red", pch=1)
ce = cross.entropy(project, K = 4)
best = which.min(ce)
project = NULL
project = lfmm("genotypes.lfmm", "gradients.env", K = 6, repetitions = 5,
project = "new")
zs = z.scores(project, K = 6)
zs.stouffer = apply(zs, MARGIN = 1, median)
lambda = median(zs^2)/.456
cp.values = pchisq(zs.stouffer^2/lambda, df = 1, lower = FALSE)
for (alpha in c(.05,.1,.15,.2)) {
# expected FDR
print(paste("expected FDR:", alpha))
L = length(cp.values)
# return a list of candidates with an expected FDR of alpha.
w = which(sort(cp.values) < alpha * (1:L) / L)
candidates = order(cp.values)[w]
# estimated FDR and True Positif
estimated.FDR = length(which(candidates <= 350))/length(candidates)
estimated.TP = length(which(candidates > 350))/50
print(paste("FDR:", estimated.FDR, "True Positive:", estimated.TP))
}
file.copy(list.files(".", pattern = ".pdf"), "..")
browseVignettes("LEA")
setwd("~/Desktop/waples/chum_populations/results/batch_4/LFMM")
library(LEA)
library(LEA)
?ped2lfmm()
ped2lfmm(input.file = '/home/ipseg/Desktop/waples/chum_populations/data/batch_4/pop_genotypes/complete.map',
output.file = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.map.lfmm')
ped2lfmm(input.file = '/home/ipseg/Desktop/waples/chum_populations/data/batch_4/pop_genotypes/complete.ped',
output.file = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.ped.lfmm')
ped_genotypes = '/home/ipseg/Desktop/waples/chum_populations/data/batch_4/pop_genotypes/complete.ped'
lfmm_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.ped.lfmm'
ped2lfmm(input.file = ped_genotypes,  output.file = lfmm_genotypes)
pc = pca(lfmm_genotypes, scale = TRUE)
?pca
tw = tracy.widom(pc)
tw$pvalues[1:10]
tw$pvalues[1:20]
plot(tw$percentage)
?snmf
lfmm2geno(input.file = lfmm_genotypes, force = TRUE)
geno_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/complete.ped.geno'
lfmm2geno(input.file = lfmm_genotypes, geno_genotypes, force = TRUE)
project = NULL
project = snmf(geno_genotypes, K=1:20, entropy = TRUE, repetitions = 10,
project = "new")
plot(project, lwd = 5, col = "red", pch=1)
plot(project, lwd = 5, col = "red", pch=1)
ce = cross.entropy(project, K = 3)
best = which.min(ce)
ce = cross.entropy(project, K = 3)
best = which.min(ce)
zs = z.scores(project, K = 3)
zs
zs = z.scores(project, K = 3)
zs.stouffer = apply(zs, MARGIN = 1, median)
ce = cross.entropy(project, K = 3)
plot(project, lwd = 5, col = "red", pch=1)
ce = cross.entropy(project, K = 3)
project = NULL
project = lfmm(lfmm_genotypes, basic_env, K = 3, repetitions = 5,
project = "new")
basic_env = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/basic.env'
project = NULL
project = lfmm(lfmm_genotypes, basic_env, K = 3, repetitions = 5,
project = "new")
project = lfmm(lfmm_genotypes, basic_env, K = 3, repetitions = 5, CPU = 6, missing.data = TRUE, project = "new",
iterations = 1000, burnin = 500)
zs = z.scores(project, K = 3)
zs.stouffer = apply(zs, MARGIN = 1, median)
lambda = median(zs^2)/.456
cp.values = pchisq(zs.stouffer^2/lambda, df = 1, lower = FALSE)
for (alpha in c(.05,.1,.15,.2)) {
# expected FDR
print(paste("expected FDR:", alpha))
L = length(cp.values)
# return a list of candidates with an expected FDR of alpha.
w = which(sort(cp.values) < alpha * (1:L) / L)
candidates = order(cp.values)[w]
for (alpha in c(.05,.1,.15,.2)) {
# expected FDR
print(paste("expected FDR:", alpha))
L = length(cp.values)
# return a list of candidates with an expected FDR of alpha.
w = which(sort(cp.values) < alpha * (1:L) / L)
candidates = order(cp.values)[w]
# estimated FDR and True Positif
estimated.FDR = length(which(candidates <= 350))/length(candidates)
estimated.TP = length(which(candidates > 350))/50
print(paste("FDR:", estimated.FDR, "True Positive:", estimated.TP))
}
candidates
ped_genotypes = '/home/ipseg/Desktop/waples/chum_populations/data/batch_4/pop_genotypes/non_paralogs.ped'
ped_genotypes = '/home/ipseg/Desktop/waples/chum_populations/data/batch_4/pop_genotypes/non_paralogs.ped'
lfmm_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.lfmm'
geno_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.geno'
ped2lfmm(input.file = ped_genotypes,  output.file = lfmm_genotypes)
lfmm2geno(input.file = lfmm_genotypes, geno_genotypes, force = TRUE)
# run pca
pc = pca(lfmm_genotypes, scale = TRUE)
# Perfom Tracy-Widom tests on all eigenvalues.
tw = tracy.widom(pc)
# display the p-values for the Tracy-Widom tests.
tw$pvalues[1:20]
# plot the percentage of variance explained by each component
plot(tw$percentage)
project = NULL
project = snmf(geno_genotypes, K=1:10, entropy = TRUE, repetitions = 10, CPU = 6, percentage = 0.05, project = "new")
# plot cross-entropy criterion of all runs of the project
plot(project, lwd = 5, col = "red", pch=1)
# get the cross-entropy of each run for K = 4
ce = cross.entropy(project, K = 3)
# select the K with the lowest cross-entropy
best = which.min(ce)
best = which.min(ce)
ce = cross.entropy(project, K = 3)
basic_env = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/basic.env'
project = NULL
project = lfmm(lfmm_genotypes, basic_env, K = 3, repetitions = 2, CPU = 6, missing.data = TRUE, project = "new",
iterations = 1000, burnin = 500)
zs = z.scores(project, K = 3)
zs.stouffer = apply(zs, MARGIN = 1, median)
cp.values = pchisq(zs.stouffer^2/lambda, df = 1, lower = FALSE)
for (alpha in c(.05,.1,.15,.2)) {
# expected FDR
print(paste("expected FDR:", alpha))
L = length(cp.values)
# return a list of candidates with an expected FDR of alpha.
w = which(sort(cp.values) < alpha * (1:L) / L)
candidates = order(cp.values)[w]
# estimated FDR and True Positif
estimated.FDR = length(which(candidates <= 350))/length(candidates)
estimated.TP = length(which(candidates > 350))/50
print(paste("FDR:", estimated.FDR, "True Positive:", estimated.TP))
}
candidates
hist(cp.values)
mlog10p.values (project, K=3, d=1, all, run, run = 2)
mlog10p.values (project, K=3, d=1, all, run, run = 2)
mlog10p.values (project, K=3, d=1, all, run)
mlog10p.values (project, K=3, d=1, all)
mlog10p.values (project, K=3, d=1)
plt.hist(mlog10p.values (project, K=3, d=1))
hist(mlog10p.values (project, K=3, d=1))
plot(sort((mlog10p.values (project, K=3, d=1))))
sort((mlog10p.values (project, K=3, d=1)))
mlog10p.values (project, K=3, d=1)
plot(sort((mlog10p.values (project, K=3, d=1, run = 1))))
max(mlog10p.values (project, K=3, d=1))
which.max(mlog10p.values (project, K=3, d=1))
which.max(mlog10p.values (project, K=3, d=1, run = 1))
which.max(mlog10p.values (project, K=3, d=1, run = 0))
which.max(mlog10p.values (project, K=3, d=1, run = 2))
plot(project, lwd = 5, col = "red", pch=1)
biocLite("LEA")
library("LEA")
setwd("~/Desktop/waples/chum_populations/results/batch_4/LFMM")
ped_genotypes = '/home/ipseg/Desktop/waples/chum_populations/data/batch_4/pop_genotypes/non_paralogs.ped'
lfmm_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.lfmm'
geno_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.geno'
# convert a .ped  file
ped2lfmm(input.file = ped_genotypes,  output.file = lfmm_genotypes)
# convert lfmm file to geno
lfmm2geno(input.file = lfmm_genotypes, geno_genotypes, force = TRUE)
# run pca
pc = pca(lfmm_genotypes, scale = TRUE)
# Perfom Tracy-Widom tests on all eigenvalues.
tw = tracy.widom(pc)
# display the p-values for the Tracy-Widom tests.
tw$pvalues[1:20]
# plot the percentage of variance explained by each component
plot(tw$percentage)
barplot(t(Q(obj.snmf, K = 6)), col = 1:6)
barplot(t(Q(project, K = 6)), col = 1:6)
t(Q(project, K = 6))
project = snmf(geno_genotypes, K=1:10, entropy = TRUE, repetitions = 10, CPU = 6, percentage = 0.05, project = "new")
plot(tw$percentage)
plot(project, lwd = 5, col = "red", pch=1)
barplot(t(Q(project, K = 6)), col = 1:6)
barplot(t(Q(project, K = 6, run  =1 )), col = 1:6)
barplot(t(Q(project, K = 3, run  =1 )), col = 1:6)
pc = pca(lfmm_genotypes, scale = TRUE)
project = snmf(geno_genotypes, K=1:10, entropy = TRUE, repetitions = 10, CPU = 6, percentage = 0.05, project = "new")
plot(project, lwd = 5, col = "red", pch=1)
barplot(t(Q(project, K = 3, run  =1 )), col = 1:6)
ce = cross.entropy(project, K = 3)
plot(project, lwd = 5, col = "red", pch=1)
ce
barplot(t(Q(project, K = 2, run  =1 )), col = 1:6)
barplot(t(Q(project, K = 4, run  =1 )), col = 1:6)
barplot(t(Q(project, K = 5, run  =1 )), col = 1:6)
barplot(t(Q(project, K = 5, run  =1 )), col = 1:3)
barplot(t(Q(project, K = 5, run  =1 )), col = 1:4)
barplot(t(Q(project, K = 3, run  =1 )), col = 1:3)
barplot(t(Q(project, K = 3, run  =1 )), col = 1:6)
barplot(t(Q(project, K = 3, run  =1 )), col = 1:6)
barplot(t(Q(project, K = 3, run  =1 )), col = 1:3)
tw = tracy.widom(pc)
tw$pvalues[1:20]
plot(tw$percentage)
plot(tw$percentage[1:20])
ce = cross.entropy(project, K = 5)
barplot(t(Q(project, K = 5, run  =1 )), col = 1:5)
?lfmm
?lfmm
warnings()
?lfmm
library("LEA")
setwd("~/Desktop/waples/chum_populations/results/batch_4/LFMM")
ped_genotypes = '/home/ipseg/Desktop/waples/chum_populations/data/batch_4/pop_genotypes/non_paralogs.ped'
lfmm_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.lfmm'
geno_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.geno'
ped2lfmm(input.file = ped_genotypes,  output.file = lfmm_genotypes)
lfmm2geno(input.file = lfmm_genotypes, geno_genotypes, force = TRUE)
pc = pca(lfmm_genotypes, scale = TRUE)
summary(pc)
pc = pca(lfmm_genotypes, k = 10, scale = TRUE, center = TRUE)
summary(pc)
pc = pca(lfmm_genotypes, K = 10, scale = TRUE, center = TRUE)
summary(pc)
pc = pca(lfmm_genotypes, K = 10, scale = TRUE, center = TRUE)
summary(pc)
pc
pc$projections
plot(pc$projections[1])
plot(pc$projections[,1])
plot(pc$projections[,1], pc$projections[,2])
plot(pc$projections[,1], pc$projections[,3])
plot(pc$projections[,1], pc$projections[,4])
plot(pc$projections[,3], pc$projections[,4])
plot(pc$projections[,2], pc$projections[,4])
plot(pc$projections[,2], pc$projections[,6])
plot(pc$projections[,1], pc$projections[,2])
pc = pca(lfmm_genotypes, K = 10, scale = TRUE, center = FALSE)
plot(pc$projections[,1], pc$projections[,2])
pc = pca(lfmm_genotypes, K = 10, scale = TRUE, center = FALSE)
plot(pc$projections[,1], pc$projections[,2])
pc = pca(lfmm_genotypes, K = 10, scale = FALSE, center = FALSE)
plot(pc$projections[,1], pc$projections[,2])
pc = pca(lfmm_genotypes, K = 10, scale = TRUE, center = FALSE)
plot(pc$projections[,1], pc$projections[,2])
tw = tracy.widom(pc)
tw$pvalues[1:20]
tw$pvalues[1:10]
plot(tw$percentage[1:20])
plot(tw$percentage[1:10])
tw$pvalues[1:10]
plot(tw$pvalues[1:10])
tw$pvalues[1:10]
pc = pca(lfmm_genotypes, K = 10, scale = TRUE, center = FALSE)
tw = tracy.widom(pc)
# display the p-values for the Tracy-Widom tests.
tw$pvalues[1:10]
pc = pca(lfmm_genotypes, K = 10, scale = TRUE, center = TRUE)
tw = tracy.widom(pc)
tw$pvalues[1:10]
plot(tw$pvalues[1:10])
plot(tw$percentage[1:10])
library("LEA")
setwd("~/Desktop/waples/chum_populations/results/batch_4/LFMM")
ped_genotypes = '/home/ipseg/Desktop/waples/chum_populations/data/batch_4/pop_genotypes/non_paralogs.ped'
lfmm_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.lfmm'
geno_genotypes = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/non_paralogs.ped.geno'
# convert a .ped  file
ped2lfmm(input.file = ped_genotypes,  output.file = lfmm_genotypes)
# convert lfmm file to geno
lfmm2geno(input.file = lfmm_genotypes, geno_genotypes, force = TRUE)
pc = pca(lfmm_genotypes, K = 20, scale = TRUE, center = TRUE)
plot(pc$projections[,1], pc$projections[,2])
tw$pvalues[1:10]
tw = tracy.widom(pc)
tw$pvalues[1:10]
pc = pca(lfmm_genotypes, scale = TRUE, center = TRUE)
plot(pc$projections[,1], pc$projections[,2])
tw = tracy.widom(pc)
tw$pvalues[1:10]
plot(tw$pvalues[1:10])
plot(tw$pvalues[1:20])
plot(tw$percentage[1:20])
plot(tw$percentage[1:20], tw$pvalues[1:20])
plot(tw$percentage[1:20], log(tw$pvalues[1:20]))
plot(tw$percentage, log(tw$pvalues))
plot(tw$percentage, log(tw$pvalues))
plot(tw$percentage, (tw$pvalues))
plot(tw$percentage, log10(tw$pvalues))
plot( log10(tw$pvalues),tw$percentage)
plot( -log10(tw$pvalues),tw$percentage)
snmf_project = NULL
snmf_project = snmf(geno_genotypes, K=1:6, entropy = TRUE, repetitions = 3, CPU = 6, percentage = 0.10, project = "new")
plot(snmf_project, lwd = 5, col = "red", pch=1)
plot(pc, lwd=5, col="red",xlab=("PCs"),ylab="eigen")
par(mfrow=c(2,2))
# Plot eigenvalues.
plot(pc, lwd=5, col="red",xlab=("PCs"),ylab="eigen")
# PC1-PC2 plot.
plot(pc$projections)
# PC3-PC4 plot.
plot(pc$projections[,3:4])
# Plot standard deviations.
plot(pc$sdev)
par(mfrow=c(1,1))
plot(pc, lwd=5, col="red",xlab=("PCs"),ylab="eigen")
plot(pc$projections)
plot(pc$sdev)
plot(pc$projections[,1], pc$projections[,2])
plot(pc$sdev)
snmf_project = snmf(geno_genotypes, K=1:6, entropy = TRUE, repetitions = 3, CPU = 6, percentage = 0.10, project = "new")
plot(snmf_project, lwd = 3, col = "red", pch=1)
ce = cross.entropy(project, K = 3)
ce = cross.entropy(snmf_project, K = 3)
best = which.min(ce)
barplot(t(Q(snmf_project, K = 3, run  =best )), col = 1:5)
barplot(t(Q(snmf_project, K = 8, run  =best )), col = 1:5)
barplot(t(Q(snmf_project, K = 6, run  =best )), col = 1:5)
snmf_project = snmf(geno_genotypes, K=1:10, entropy = TRUE, repetitions = 3, CPU = 6, percentage = 0.10, project = "new")
barplot(t(Q(snmf_project, K = 6, run  =best )), col = 1:5)
barplot(t(Q(snmf_project, K = 6, run  =best )), col = 1:6)
barplot(t(Q(snmf_project, K = 10, run  =best )), col = 1:10)
barplot(t(Q(snmf_project, K = 8, run  =best )), col = 1:8)
barplot(t(Q(snmf_project, K = 7, run  =best )), col = 1:8)
barplot(t(Q(snmf_project, K = 6, run  =best )), col = 1:8)
barplot(t(Q(snmf_project, K = 5, run  =best )), col = 1:8)
barplot(t(Q(snmf_project, K = 4, run  =best )), col = 1:8)
barplot(t(Q(snmf_project, K = 3, run  =best )), col = 1:8)
(Q(snmf_project, K = 3, run  =best )
Q(snmf_project, K = 3, run  =best )
t(Q(snmf_project, K = 4, run  =best ))
t(sort(Q(snmf_project, K = 4, run  =best )))
barplot(t(sort(Q(snmf_project, K = 4, run  =best ))))
barplot(t(sort(Q(snmf_project, K = 4, run  =best ))), col = 1:4)
barplot(t(sort(Q(snmf_project, K = 4, run  =best ))), col = 1:4)
sort(Q(snmf_project, K = 4, run  =best )))
sort(Q(snmf_project, K = 4, run  =best ))
?order()
barplot(t(order(Q(snmf_project, K = 4, run  =best ))), col = 1:4)
barplot(t(order(Q(snmf_project, K = 4, run  =best ))), col = 1:4)
?order
pp = Q(snmf_project, K = 4, run  =best ))
pp = Q(snmf_project, K = 4, run  =best )
pp
order(pp)
pp[order(pp)]
pp[,order(pp)]
pp[order(pp),]
pp[order(pp),]
pp = data.frame(Q(snmf_project, K = 4, run  =best ))
pp[order(pp),]
pp
p
pp[order(pp)]
pp[,order(pp)]
pp[order(pp),]
pp
pp[,order(pp)]
pp[:,order(pp)]
pp[,order(pp)]
pp[order(pp),]
pp
order(pp)
library(plyr)
?arrange
arrange(pp, V1, V2, V3, V4)
barplot(t(pp))
barplot(t(pp), col = 1:8)
pp = data.frame(Q(snmf_project, K = 3, run  =best ))
pp = arrange(pp, V1, V2, V3, V4)
barplot(t(pp), col = 1:8)
barplot(t(pp), col = 1:8)
pp = arrange(pp, V1, V2, V3, V4)
pp
barplot(t(order(Q(snmf_project, K = 4, run  =best ))), col = 1:4))
barplot(t(order(Q(snmf_project, K = 4, run  =best ))), col = 1:4))
pp = data.frame(Q(snmf_project, K = 3, run  =best ))
pp = arrange(pp, V1, V2, V3, V4)
barplot(t(pp), col = 1:8)
pp = data.frame(Q(snmf_project, K = 3, run  =best ))
pp = arrange(pp, V4)
pp = arrange(pp, V3)
pp = arrange(pp, V2)
pp = arrange(pp, V1)
barplot(t(pp), col = 1:8)
pp = data.frame(Q(snmf_project, K = 3, run  =best ))
pp = arrange(pp, V4)
pp = arrange(pp, V3)
pp = arrange(pp, V2)
pp = arrange(pp, V1)
barplot(t(pp), col = 1:8)
barplot(t(pp), col = 1:8)
basic_env = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/basic.env'
basic_env = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/basic.env'
project = NULL
project = lfmm(lfmm_genotypes, basic_env, K = 3, repetitions = 5, CPU = 7, missing.data = TRUE, project = "new",
iterations = 10000, burnin = 5000)
zs = z.scores(project, K = 3)
?lfmm
zs.stouffer = apply(zs, MARGIN = 1, median)
lambda = median(zs^2)/.456
cp.values = pchisq(zs.stouffer^2/lambda, df = 1, lower = FALSE)
L = 500
q = 0.1
w = which(sort(cp.values) < q * (1:L)/L)
candidates = order(adj.p.values)[w]
L = 12399
q = 0.05
w = which(sort(cp.values) < q * (1:L)/L)
candidates = order(cp.values)[w]
candidates
w
cp.values
candidates
which.max(mlog10p.values (project, K=3, d=1, run = 2))
sort((mlog10p.values (project, K=3, d=1)))
plot(sort((mlog10p.values (project, K=3, d=1, run = 1))))
hist(cp.values)
plot(sort((mlog10p.values (project, K=3, d=1, run = 1))))
mlog10p.values
project
which.max(mlog10p.values (project, K=3, d=1, run = 2))
mlog10p.values
mlog10p.values(project, K=3, d=1, run = 2)
cp.values
data.frame('cpvals' = cp.values)
data.frame('cpvals' = cp.values)
zs.stouffer
seq(12399)
data.frame('locnum' = seq(12399), 'cpvals' = cp.values, 'zscore' = zs.stouffer )
data.frame('locnum' = seq(12399), 'cpvals' = cp.values, 'zscore' = zs.stouffer)
lfmm_results = data.frame('locnum' = seq(12399), 'cpvals' = cp.values, 'zscore' = zs.stouffer)
write.table(lfmm_results)
?write.table(lfmm_results)
?write.table(lfmm_results, file = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/lfmm_results.txt')
write.table(lfmm_results, file = '/home/ipseg/Desktop/waples/chum_populations/results/batch_4/LFMM/lfmm_results.txt',
sep ='\t', quote = FALSE, row.names = FALSE)
?lfmm
